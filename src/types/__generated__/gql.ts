/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  subscription TestSubscription {\n    testSubscription {\n      message\n      time\n    }\n  }\n": types.TestSubscriptionDocument,
    "\n  mutation TestSubscriptionEvent (\n    $message: String!\n  ) {\n    testSubscriptionEvent(\n      message: $message\n    ) {\n      response\n    }\n  }\n": types.TestSubscriptionEventDocument,
    "\n  query ListMessages {\n    listMessages {\n      edges {\n        node {\n          title\n          priority\n          category\n          state\n          delivery\n        }\n      }\n    }\n  }\n": types.ListMessagesDocument,
    "\n  query ListParticipants (\n    $shift: ID\n    $task: ID\n    $operation: ID\n    $project: ID\n    $organization: ID\n  ) {\n    listParticipants (\n      role_Shift: $shift\n      role_Shift_Task: $task\n      role_Shift_Task_Operation: $operation\n      role_Shift_Task_Operation_Project: $project\n      role_Shift_Task_Operation_Project_Organization: $organization\n    ) {\n      edges {\n        node {\n          id\n          acceptance\n          adminAcceptance\n          person {\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n  }\n": types.ListParticipantsDocument,
    "\n  mutation ActivatePerson(\n    $token: String!\n  ) {\n    activatePerson(\n      input: {\n        token: $token\n      }\n    ) {\n      email\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.ActivatePersonDocument,
    "\n  mutation TokenAuth (\n    $email: String!\n    $password: String!\n  ) {\n    tokenAuth(\n      input: {\n        email: $email\n        password: $password\n      }\n    ) {\n      id\n      token\n      refreshExpiresIn\n      adminLevel\n    }\n  }\n": types.TokenAuthDocument,
    "\n  query GetPersonProfile {\n    getPersonProfile {\n      firstName\n      lastName\n      email\n      occupation\n      street\n      number\n      postalCode\n      city\n      privatePhone\n      mobilePhone\n      onlyJobRelatedTopics\n    }\n  }\n": types.GetPersonProfileDocument,
    "\n  mutation UpdatePersonProfile (\n    $firstName: String\n    $lastName: String\n    $occupation: String\n    $street: String\n    $number: String\n    $postalCode: String\n    $city: String\n    $privatePhone: String\n    $mobilePhone: String\n    $onlyJobRelatedTopics: String\n  ) {\n    updatePersonProfile (\n      input: {\n        firstName: $firstName\n        lastName: $lastName\n        occupation: $occupation\n        street: $street\n        number: $number\n        postalCode: $postalCode\n        city: $city\n        privatePhone: $privatePhone\n        mobilePhone: $mobilePhone\n        onlyJobRelatedTopics: $onlyJobRelatedTopics\n      }\n    ) {\n      person {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.UpdatePersonProfileDocument,
    "\n  query ListPersonPropertyGroups (\n    $organization: ID\n  ) {\n    listPersonPropertyGroups (\n      organization: $organization\n    ) {\n      edges {\n        node {\n          id\n          codename\n          name\n          selectionType\n          personpropertySet {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ListPersonPropertyGroupsDocument,
    "\n  query GetPersonProfileProperties {\n    getPersonProfile {\n      properties {\n        edges {\n          node {\n            id\n            group {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetPersonProfilePropertiesDocument,
    "\n  mutation UpdatePersonProfileProperties (\n    $properties: [ID]\n  ) {\n    updatePersonProfile (\n      input: {\n        properties: $properties\n      }\n    ) {\n      person {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.UpdatePersonProfilePropertiesDocument,
    "\n  mutation RegisterPerson (\n    $email: String!\n    $password: String!\n  ) {\n    registerPerson(\n      input: {\n        email: $email\n        password: $password\n      }\n    ) {\n      id\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.RegisterPersonDocument,
    "\n  query ListPersons {\n    listPersons {\n      edges {\n        node {\n          id\n          email\n          firstName\n          lastName\n          dateJoined\n          organizationsSubscribed {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ListPersonsDocument,
    "\n  query ListQualifications {\n    listPersonPropertyGroups {\n      edges {\n        node {\n          id\n          name\n          selectionType\n          necessity\n          personpropertySet {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ListQualificationsDocument,
    "\n  query ListShifts (\n    $task: ID\n    $operation: ID\n    $project: ID\n    $organization: ID\n  ) {\n    listShifts (\n      task: $task\n      task_Operation: $operation\n      task_Operation_Project: $project\n      task_Operation_Project_Organization: $organization\n    ) {\n      edges {\n        node {\n          id\n          state\n          startTime\n          endTime\n          enrollmentDeadline\n        }\n      }\n    }\n  }\n": types.ListShiftsDocument,
    "\n  mutation CreateTask (\n    $operation: ID!\n    $field: ID!\n    $name: String!\n    $description: String\n    $startTime: DateTime!\n    $endTime: DateTime\n  ) {\n    createTask (\n      input: {\n        operation: $operation\n        field: $field\n        name: $name\n        description: $description\n        startTime: $startTime\n        endTime: $endTime\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.CreateTaskDocument,
    "\n  query GetTask (\n    $id: ID!\n  ) {\n    listTasks (\n      id: $id\n    ) {\n      edges {\n        node {\n          id\n          createdAt\n          modifiedAt\n          state\n          field {\n            id\n            name\n          }\n          name\n          description\n          startTime\n          endTime\n          operation {\n            id\n            name\n          }\n          roleSet {\n            edges {\n              node {\n                id\n                name\n                description\n                quantity\n                participantsAccepted\n                participantsDeclined\n                participantsPending\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetTaskDocument,
    "\n  mutation UpdateTask (\n    $id: ID!\n    $field: ID\n    $name: String\n    $description: String\n    $startTime: DateTime\n    $endTime: DateTime\n  ) {\n    updateTask (\n      input: {\n        id: $id\n        field: $field\n        name: $name\n        description: $description\n        startTime: $startTime\n        endTime: $endTime\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.UpdateTaskDocument,
    "\n  query ListTaskFields {\n    listTaskFields {\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n": types.ListTaskFieldsDocument,
    "\n  fragment OrganizationParts on OrganizationType {\n    id\n    name\n    description\n    organizationState: state\n    icon\n  }\n  fragment ProjectParts on ProjectType {\n    id\n    name\n    description\n    projectState: state\n    organization {\n      ... OrganizationParts\n    }\n  }\n  fragment OperationParts on OperationType {\n    id\n    name\n    description\n    operationState: state\n    project {\n      ... ProjectParts\n    }\n  }\n  fragment TaskParts on TaskType {\n    id\n    name\n    description\n    taskState: state\n    startTime\n    taskEndTime: endTime\n    operation {\n      ... OperationParts\n    }\n  }\n  fragment ShiftParts on ShiftType {\n    id\n    state\n    startTime\n    shiftEndTime: endTime\n    task {\n      ... TaskParts\n    }\n  }\n": types.OrganizationPartsFragmentDoc,
    "\n  query GetFilterObject (\n    $id: ID!\n  ) {\n    node (\n      id: $id\n    ) {\n      __typename\n      ... on OrganizationType {\n        ... OrganizationParts\n      }\n      ... on ProjectType {\n        ... ProjectParts\n      }\n      ... on OperationType {\n        ... OperationParts\n      }\n      ... on TaskType {\n        ... TaskParts\n      }\n      ... on ShiftType {\n        ... ShiftParts\n      }\n    }\n  }\n": types.GetFilterObjectDocument,
    "\n  query GetOperation (\n    $id: ID!\n  ) {\n    listOperations (\n      id: $id\n    ) {\n      edges {\n        node {\n          id\n          createdAt\n          modifiedAt\n          state\n          name\n          description\n          project {\n            id\n            name\n            organization {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetOperationDocument,
    "\n  query ListOperations (\n    $project: ID\n    $organization: ID\n    $state_In: [GeorgaOperationStateChoices]\n  ) {\n    listOperations (\n      project: $project\n      project_Organization: $organization\n      state_In: $state_In\n    ){\n      edges {\n        node {\n          id\n          state\n          name\n          description\n        }\n      }\n    }\n  }\n": types.ListOperationsDocument,
    "\n  mutation CreateOperation (\n    $publish: Boolean\n    $project: ID!\n    $name: String!\n    $description: String\n  ) {\n    createOperation (\n      input: {\n        publish: $publish\n        project: $project\n        name: $name\n        description: $description\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.CreateOperationDocument,
    "\n  mutation UpdateOperation (\n    $id: ID!\n    $name: String\n    $description: String\n  ) {\n    updateOperation (\n      input: {\n        id: $id\n        name: $name\n        description: $description\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.UpdateOperationDocument,
    "\n  mutation PublishOperation (\n    $id: ID!\n  ) {\n    publishOperation (\n      input: {\n        id: $id\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.PublishOperationDocument,
    "\n  mutation ArchiveOperation (\n    $id: ID!\n  ) {\n    archiveOperation (\n      input: {\n        id: $id\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.ArchiveOperationDocument,
    "\n  mutation DeleteOperation (\n    $id: ID!\n  ) {\n    deleteOperation (\n      input: {\n        id: $id\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.DeleteOperationDocument,
    "\n  query GetOrganization (\n    $id: ID!\n  ) {\n    listOrganizations (\n      id: $id\n    ) {\n      edges {\n        node {\n          id\n          createdAt\n          modifiedAt\n          state\n          name\n          description\n          icon\n        }\n      }\n    }\n  }\n": types.GetOrganizationDocument,
    "\n  query GetPersonOrganizationsProfile (\n    $name_Icontains: String\n  ) {\n    getPersonProfile {\n      organizationsSubscribed (\n        name_Icontains: $name_Icontains\n      ) {\n        edges {\n          node {\n            id\n            name\n            description\n            icon\n          }\n        }\n      }\n    }\n  }\n": types.GetPersonOrganizationsProfileDocument,
    "\n  query ListOrganizations (\n    $state_In: [GeorgaOrganizationStateChoices]\n  ) {\n    listOrganizations (\n      state_In: $state_In\n    ) {\n      edges {\n        node {\n          id\n          state\n          name\n          icon\n          description\n        }\n      }\n    }\n  }\n": types.ListOrganizationsDocument,
    "\n  mutation CreateOrganization (\n    $name: String!\n    $description: String\n    $icon: String\n  ) {\n    createOrganization (\n      input: {\n        name: $name\n        description: $description\n        icon: $icon\n      }\n    ) {\n      organization {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.CreateOrganizationDocument,
    "\n  mutation UpdateOrganization (\n    $id: ID!\n    $name: String\n    $description: String\n    $icon: String\n  ) {\n    updateOrganization (\n      input: {\n        id: $id\n        name: $name\n        description: $description\n        icon: $icon\n      }\n    ) {\n      organization {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.UpdateOrganizationDocument,
    "\n  mutation PublishOrganization (\n    $id: ID!\n  ) {\n    publishOrganization (\n      input: {\n        id: $id\n      }\n    ) {\n      organization {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.PublishOrganizationDocument,
    "\n  mutation ArchiveOrganization (\n    $id: ID!\n  ) {\n    archiveOrganization (\n      input: {\n        id: $id\n      }\n    ) {\n      organization {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.ArchiveOrganizationDocument,
    "\n  query GetProject (\n    $id: ID!\n  ) {\n    listProjects (\n      id: $id\n    ) {\n      edges {\n        node {\n          id\n          createdAt\n          modifiedAt\n          state\n          name\n          description\n          organization {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetProjectDocument,
    "\n  query ListProjects (\n    $organization: ID\n    $state_In: [GeorgaProjectStateChoices]\n  ) {\n    listProjects (\n      organization: $organization\n      state_In: $state_In\n    ) {\n      edges {\n        node {\n          id\n          state\n          name\n          description\n        }\n      }\n    }\n  }\n": types.ListProjectsDocument,
    "\n  mutation CreateProject (\n    $publish: Boolean\n    $organization: ID!\n    $name: String!\n    $description: String\n  ) {\n    createProject (\n      input: {\n        publish: $publish\n        organization: $organization\n        name: $name\n        description: $description\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.CreateProjectDocument,
    "\n  mutation UpdateProject (\n    $id: ID!\n    $name: String\n    $description: String\n  ) {\n    updateProject (\n      input: {\n        id: $id\n        name: $name\n        description: $description\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.UpdateProjectDocument,
    "\n  mutation PublishProject (\n    $id: ID!\n  ) {\n    publishProject (\n      input: {\n        id: $id\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.PublishProjectDocument,
    "\n  mutation ArchiveProject (\n    $id: ID!\n  ) {\n    archiveProject (\n      input: {\n        id: $id\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.ArchiveProjectDocument,
    "\n  mutation DeleteProject (\n    $id: ID!\n  ) {\n    deleteProject (\n      input: {\n        id: $id\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.DeleteProjectDocument,
    "\n  query ListTasks (\n    $operation: ID\n    $project: ID\n    $organization: ID\n    $state_In: [GeorgaTaskStateChoices]\n  ) {\n    listTasks (\n      operation: $operation\n      operation_Project: $project\n      operation_Project_Organization: $organization\n      state_In: $state_In\n    ) {\n      edges {\n        node {\n          id\n          state\n          name\n          description\n          field {\n            name\n            description\n          }\n          startTime\n          endTime\n        }\n      }\n    }\n  }\n": types.ListTasksDocument,
    "\n  mutation PublishTask (\n    $id: ID!\n  ) {\n    publishTask (\n      input: {\n        id: $id\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.PublishTaskDocument,
    "\n  mutation ArchiveTask (\n    $id: ID!\n  ) {\n    archiveTask (\n      input: {\n        id: $id\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.ArchiveTaskDocument,
    "\n  mutation DeleteTask (\n    $id: ID!\n  ) {\n    deleteTask (\n      input: {\n        id: $id\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n": types.DeleteTaskDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  subscription TestSubscription {\n    testSubscription {\n      message\n      time\n    }\n  }\n"): (typeof documents)["\n  subscription TestSubscription {\n    testSubscription {\n      message\n      time\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation TestSubscriptionEvent (\n    $message: String!\n  ) {\n    testSubscriptionEvent(\n      message: $message\n    ) {\n      response\n    }\n  }\n"): (typeof documents)["\n  mutation TestSubscriptionEvent (\n    $message: String!\n  ) {\n    testSubscriptionEvent(\n      message: $message\n    ) {\n      response\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ListMessages {\n    listMessages {\n      edges {\n        node {\n          title\n          priority\n          category\n          state\n          delivery\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ListMessages {\n    listMessages {\n      edges {\n        node {\n          title\n          priority\n          category\n          state\n          delivery\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ListParticipants (\n    $shift: ID\n    $task: ID\n    $operation: ID\n    $project: ID\n    $organization: ID\n  ) {\n    listParticipants (\n      role_Shift: $shift\n      role_Shift_Task: $task\n      role_Shift_Task_Operation: $operation\n      role_Shift_Task_Operation_Project: $project\n      role_Shift_Task_Operation_Project_Organization: $organization\n    ) {\n      edges {\n        node {\n          id\n          acceptance\n          adminAcceptance\n          person {\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ListParticipants (\n    $shift: ID\n    $task: ID\n    $operation: ID\n    $project: ID\n    $organization: ID\n  ) {\n    listParticipants (\n      role_Shift: $shift\n      role_Shift_Task: $task\n      role_Shift_Task_Operation: $operation\n      role_Shift_Task_Operation_Project: $project\n      role_Shift_Task_Operation_Project_Organization: $organization\n    ) {\n      edges {\n        node {\n          id\n          acceptance\n          adminAcceptance\n          person {\n            firstName\n            lastName\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ActivatePerson(\n    $token: String!\n  ) {\n    activatePerson(\n      input: {\n        token: $token\n      }\n    ) {\n      email\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ActivatePerson(\n    $token: String!\n  ) {\n    activatePerson(\n      input: {\n        token: $token\n      }\n    ) {\n      email\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation TokenAuth (\n    $email: String!\n    $password: String!\n  ) {\n    tokenAuth(\n      input: {\n        email: $email\n        password: $password\n      }\n    ) {\n      id\n      token\n      refreshExpiresIn\n      adminLevel\n    }\n  }\n"): (typeof documents)["\n  mutation TokenAuth (\n    $email: String!\n    $password: String!\n  ) {\n    tokenAuth(\n      input: {\n        email: $email\n        password: $password\n      }\n    ) {\n      id\n      token\n      refreshExpiresIn\n      adminLevel\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPersonProfile {\n    getPersonProfile {\n      firstName\n      lastName\n      email\n      occupation\n      street\n      number\n      postalCode\n      city\n      privatePhone\n      mobilePhone\n      onlyJobRelatedTopics\n    }\n  }\n"): (typeof documents)["\n  query GetPersonProfile {\n    getPersonProfile {\n      firstName\n      lastName\n      email\n      occupation\n      street\n      number\n      postalCode\n      city\n      privatePhone\n      mobilePhone\n      onlyJobRelatedTopics\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdatePersonProfile (\n    $firstName: String\n    $lastName: String\n    $occupation: String\n    $street: String\n    $number: String\n    $postalCode: String\n    $city: String\n    $privatePhone: String\n    $mobilePhone: String\n    $onlyJobRelatedTopics: String\n  ) {\n    updatePersonProfile (\n      input: {\n        firstName: $firstName\n        lastName: $lastName\n        occupation: $occupation\n        street: $street\n        number: $number\n        postalCode: $postalCode\n        city: $city\n        privatePhone: $privatePhone\n        mobilePhone: $mobilePhone\n        onlyJobRelatedTopics: $onlyJobRelatedTopics\n      }\n    ) {\n      person {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePersonProfile (\n    $firstName: String\n    $lastName: String\n    $occupation: String\n    $street: String\n    $number: String\n    $postalCode: String\n    $city: String\n    $privatePhone: String\n    $mobilePhone: String\n    $onlyJobRelatedTopics: String\n  ) {\n    updatePersonProfile (\n      input: {\n        firstName: $firstName\n        lastName: $lastName\n        occupation: $occupation\n        street: $street\n        number: $number\n        postalCode: $postalCode\n        city: $city\n        privatePhone: $privatePhone\n        mobilePhone: $mobilePhone\n        onlyJobRelatedTopics: $onlyJobRelatedTopics\n      }\n    ) {\n      person {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ListPersonPropertyGroups (\n    $organization: ID\n  ) {\n    listPersonPropertyGroups (\n      organization: $organization\n    ) {\n      edges {\n        node {\n          id\n          codename\n          name\n          selectionType\n          personpropertySet {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ListPersonPropertyGroups (\n    $organization: ID\n  ) {\n    listPersonPropertyGroups (\n      organization: $organization\n    ) {\n      edges {\n        node {\n          id\n          codename\n          name\n          selectionType\n          personpropertySet {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPersonProfileProperties {\n    getPersonProfile {\n      properties {\n        edges {\n          node {\n            id\n            group {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPersonProfileProperties {\n    getPersonProfile {\n      properties {\n        edges {\n          node {\n            id\n            group {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdatePersonProfileProperties (\n    $properties: [ID]\n  ) {\n    updatePersonProfile (\n      input: {\n        properties: $properties\n      }\n    ) {\n      person {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePersonProfileProperties (\n    $properties: [ID]\n  ) {\n    updatePersonProfile (\n      input: {\n        properties: $properties\n      }\n    ) {\n      person {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RegisterPerson (\n    $email: String!\n    $password: String!\n  ) {\n    registerPerson(\n      input: {\n        email: $email\n        password: $password\n      }\n    ) {\n      id\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RegisterPerson (\n    $email: String!\n    $password: String!\n  ) {\n    registerPerson(\n      input: {\n        email: $email\n        password: $password\n      }\n    ) {\n      id\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ListPersons {\n    listPersons {\n      edges {\n        node {\n          id\n          email\n          firstName\n          lastName\n          dateJoined\n          organizationsSubscribed {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ListPersons {\n    listPersons {\n      edges {\n        node {\n          id\n          email\n          firstName\n          lastName\n          dateJoined\n          organizationsSubscribed {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ListQualifications {\n    listPersonPropertyGroups {\n      edges {\n        node {\n          id\n          name\n          selectionType\n          necessity\n          personpropertySet {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ListQualifications {\n    listPersonPropertyGroups {\n      edges {\n        node {\n          id\n          name\n          selectionType\n          necessity\n          personpropertySet {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ListShifts (\n    $task: ID\n    $operation: ID\n    $project: ID\n    $organization: ID\n  ) {\n    listShifts (\n      task: $task\n      task_Operation: $operation\n      task_Operation_Project: $project\n      task_Operation_Project_Organization: $organization\n    ) {\n      edges {\n        node {\n          id\n          state\n          startTime\n          endTime\n          enrollmentDeadline\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ListShifts (\n    $task: ID\n    $operation: ID\n    $project: ID\n    $organization: ID\n  ) {\n    listShifts (\n      task: $task\n      task_Operation: $operation\n      task_Operation_Project: $project\n      task_Operation_Project_Organization: $organization\n    ) {\n      edges {\n        node {\n          id\n          state\n          startTime\n          endTime\n          enrollmentDeadline\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateTask (\n    $operation: ID!\n    $field: ID!\n    $name: String!\n    $description: String\n    $startTime: DateTime!\n    $endTime: DateTime\n  ) {\n    createTask (\n      input: {\n        operation: $operation\n        field: $field\n        name: $name\n        description: $description\n        startTime: $startTime\n        endTime: $endTime\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateTask (\n    $operation: ID!\n    $field: ID!\n    $name: String!\n    $description: String\n    $startTime: DateTime!\n    $endTime: DateTime\n  ) {\n    createTask (\n      input: {\n        operation: $operation\n        field: $field\n        name: $name\n        description: $description\n        startTime: $startTime\n        endTime: $endTime\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetTask (\n    $id: ID!\n  ) {\n    listTasks (\n      id: $id\n    ) {\n      edges {\n        node {\n          id\n          createdAt\n          modifiedAt\n          state\n          field {\n            id\n            name\n          }\n          name\n          description\n          startTime\n          endTime\n          operation {\n            id\n            name\n          }\n          roleSet {\n            edges {\n              node {\n                id\n                name\n                description\n                quantity\n                participantsAccepted\n                participantsDeclined\n                participantsPending\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTask (\n    $id: ID!\n  ) {\n    listTasks (\n      id: $id\n    ) {\n      edges {\n        node {\n          id\n          createdAt\n          modifiedAt\n          state\n          field {\n            id\n            name\n          }\n          name\n          description\n          startTime\n          endTime\n          operation {\n            id\n            name\n          }\n          roleSet {\n            edges {\n              node {\n                id\n                name\n                description\n                quantity\n                participantsAccepted\n                participantsDeclined\n                participantsPending\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTask (\n    $id: ID!\n    $field: ID\n    $name: String\n    $description: String\n    $startTime: DateTime\n    $endTime: DateTime\n  ) {\n    updateTask (\n      input: {\n        id: $id\n        field: $field\n        name: $name\n        description: $description\n        startTime: $startTime\n        endTime: $endTime\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTask (\n    $id: ID!\n    $field: ID\n    $name: String\n    $description: String\n    $startTime: DateTime\n    $endTime: DateTime\n  ) {\n    updateTask (\n      input: {\n        id: $id\n        field: $field\n        name: $name\n        description: $description\n        startTime: $startTime\n        endTime: $endTime\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ListTaskFields {\n    listTaskFields {\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ListTaskFields {\n    listTaskFields {\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment OrganizationParts on OrganizationType {\n    id\n    name\n    description\n    organizationState: state\n    icon\n  }\n  fragment ProjectParts on ProjectType {\n    id\n    name\n    description\n    projectState: state\n    organization {\n      ... OrganizationParts\n    }\n  }\n  fragment OperationParts on OperationType {\n    id\n    name\n    description\n    operationState: state\n    project {\n      ... ProjectParts\n    }\n  }\n  fragment TaskParts on TaskType {\n    id\n    name\n    description\n    taskState: state\n    startTime\n    taskEndTime: endTime\n    operation {\n      ... OperationParts\n    }\n  }\n  fragment ShiftParts on ShiftType {\n    id\n    state\n    startTime\n    shiftEndTime: endTime\n    task {\n      ... TaskParts\n    }\n  }\n"): (typeof documents)["\n  fragment OrganizationParts on OrganizationType {\n    id\n    name\n    description\n    organizationState: state\n    icon\n  }\n  fragment ProjectParts on ProjectType {\n    id\n    name\n    description\n    projectState: state\n    organization {\n      ... OrganizationParts\n    }\n  }\n  fragment OperationParts on OperationType {\n    id\n    name\n    description\n    operationState: state\n    project {\n      ... ProjectParts\n    }\n  }\n  fragment TaskParts on TaskType {\n    id\n    name\n    description\n    taskState: state\n    startTime\n    taskEndTime: endTime\n    operation {\n      ... OperationParts\n    }\n  }\n  fragment ShiftParts on ShiftType {\n    id\n    state\n    startTime\n    shiftEndTime: endTime\n    task {\n      ... TaskParts\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetFilterObject (\n    $id: ID!\n  ) {\n    node (\n      id: $id\n    ) {\n      __typename\n      ... on OrganizationType {\n        ... OrganizationParts\n      }\n      ... on ProjectType {\n        ... ProjectParts\n      }\n      ... on OperationType {\n        ... OperationParts\n      }\n      ... on TaskType {\n        ... TaskParts\n      }\n      ... on ShiftType {\n        ... ShiftParts\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFilterObject (\n    $id: ID!\n  ) {\n    node (\n      id: $id\n    ) {\n      __typename\n      ... on OrganizationType {\n        ... OrganizationParts\n      }\n      ... on ProjectType {\n        ... ProjectParts\n      }\n      ... on OperationType {\n        ... OperationParts\n      }\n      ... on TaskType {\n        ... TaskParts\n      }\n      ... on ShiftType {\n        ... ShiftParts\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetOperation (\n    $id: ID!\n  ) {\n    listOperations (\n      id: $id\n    ) {\n      edges {\n        node {\n          id\n          createdAt\n          modifiedAt\n          state\n          name\n          description\n          project {\n            id\n            name\n            organization {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOperation (\n    $id: ID!\n  ) {\n    listOperations (\n      id: $id\n    ) {\n      edges {\n        node {\n          id\n          createdAt\n          modifiedAt\n          state\n          name\n          description\n          project {\n            id\n            name\n            organization {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ListOperations (\n    $project: ID\n    $organization: ID\n    $state_In: [GeorgaOperationStateChoices]\n  ) {\n    listOperations (\n      project: $project\n      project_Organization: $organization\n      state_In: $state_In\n    ){\n      edges {\n        node {\n          id\n          state\n          name\n          description\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ListOperations (\n    $project: ID\n    $organization: ID\n    $state_In: [GeorgaOperationStateChoices]\n  ) {\n    listOperations (\n      project: $project\n      project_Organization: $organization\n      state_In: $state_In\n    ){\n      edges {\n        node {\n          id\n          state\n          name\n          description\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateOperation (\n    $publish: Boolean\n    $project: ID!\n    $name: String!\n    $description: String\n  ) {\n    createOperation (\n      input: {\n        publish: $publish\n        project: $project\n        name: $name\n        description: $description\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOperation (\n    $publish: Boolean\n    $project: ID!\n    $name: String!\n    $description: String\n  ) {\n    createOperation (\n      input: {\n        publish: $publish\n        project: $project\n        name: $name\n        description: $description\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateOperation (\n    $id: ID!\n    $name: String\n    $description: String\n  ) {\n    updateOperation (\n      input: {\n        id: $id\n        name: $name\n        description: $description\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateOperation (\n    $id: ID!\n    $name: String\n    $description: String\n  ) {\n    updateOperation (\n      input: {\n        id: $id\n        name: $name\n        description: $description\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation PublishOperation (\n    $id: ID!\n  ) {\n    publishOperation (\n      input: {\n        id: $id\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PublishOperation (\n    $id: ID!\n  ) {\n    publishOperation (\n      input: {\n        id: $id\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ArchiveOperation (\n    $id: ID!\n  ) {\n    archiveOperation (\n      input: {\n        id: $id\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ArchiveOperation (\n    $id: ID!\n  ) {\n    archiveOperation (\n      input: {\n        id: $id\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteOperation (\n    $id: ID!\n  ) {\n    deleteOperation (\n      input: {\n        id: $id\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteOperation (\n    $id: ID!\n  ) {\n    deleteOperation (\n      input: {\n        id: $id\n      }\n    ) {\n      operation {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetOrganization (\n    $id: ID!\n  ) {\n    listOrganizations (\n      id: $id\n    ) {\n      edges {\n        node {\n          id\n          createdAt\n          modifiedAt\n          state\n          name\n          description\n          icon\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOrganization (\n    $id: ID!\n  ) {\n    listOrganizations (\n      id: $id\n    ) {\n      edges {\n        node {\n          id\n          createdAt\n          modifiedAt\n          state\n          name\n          description\n          icon\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPersonOrganizationsProfile (\n    $name_Icontains: String\n  ) {\n    getPersonProfile {\n      organizationsSubscribed (\n        name_Icontains: $name_Icontains\n      ) {\n        edges {\n          node {\n            id\n            name\n            description\n            icon\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPersonOrganizationsProfile (\n    $name_Icontains: String\n  ) {\n    getPersonProfile {\n      organizationsSubscribed (\n        name_Icontains: $name_Icontains\n      ) {\n        edges {\n          node {\n            id\n            name\n            description\n            icon\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ListOrganizations (\n    $state_In: [GeorgaOrganizationStateChoices]\n  ) {\n    listOrganizations (\n      state_In: $state_In\n    ) {\n      edges {\n        node {\n          id\n          state\n          name\n          icon\n          description\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ListOrganizations (\n    $state_In: [GeorgaOrganizationStateChoices]\n  ) {\n    listOrganizations (\n      state_In: $state_In\n    ) {\n      edges {\n        node {\n          id\n          state\n          name\n          icon\n          description\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateOrganization (\n    $name: String!\n    $description: String\n    $icon: String\n  ) {\n    createOrganization (\n      input: {\n        name: $name\n        description: $description\n        icon: $icon\n      }\n    ) {\n      organization {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOrganization (\n    $name: String!\n    $description: String\n    $icon: String\n  ) {\n    createOrganization (\n      input: {\n        name: $name\n        description: $description\n        icon: $icon\n      }\n    ) {\n      organization {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateOrganization (\n    $id: ID!\n    $name: String\n    $description: String\n    $icon: String\n  ) {\n    updateOrganization (\n      input: {\n        id: $id\n        name: $name\n        description: $description\n        icon: $icon\n      }\n    ) {\n      organization {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateOrganization (\n    $id: ID!\n    $name: String\n    $description: String\n    $icon: String\n  ) {\n    updateOrganization (\n      input: {\n        id: $id\n        name: $name\n        description: $description\n        icon: $icon\n      }\n    ) {\n      organization {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation PublishOrganization (\n    $id: ID!\n  ) {\n    publishOrganization (\n      input: {\n        id: $id\n      }\n    ) {\n      organization {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PublishOrganization (\n    $id: ID!\n  ) {\n    publishOrganization (\n      input: {\n        id: $id\n      }\n    ) {\n      organization {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ArchiveOrganization (\n    $id: ID!\n  ) {\n    archiveOrganization (\n      input: {\n        id: $id\n      }\n    ) {\n      organization {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ArchiveOrganization (\n    $id: ID!\n  ) {\n    archiveOrganization (\n      input: {\n        id: $id\n      }\n    ) {\n      organization {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProject (\n    $id: ID!\n  ) {\n    listProjects (\n      id: $id\n    ) {\n      edges {\n        node {\n          id\n          createdAt\n          modifiedAt\n          state\n          name\n          description\n          organization {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProject (\n    $id: ID!\n  ) {\n    listProjects (\n      id: $id\n    ) {\n      edges {\n        node {\n          id\n          createdAt\n          modifiedAt\n          state\n          name\n          description\n          organization {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ListProjects (\n    $organization: ID\n    $state_In: [GeorgaProjectStateChoices]\n  ) {\n    listProjects (\n      organization: $organization\n      state_In: $state_In\n    ) {\n      edges {\n        node {\n          id\n          state\n          name\n          description\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ListProjects (\n    $organization: ID\n    $state_In: [GeorgaProjectStateChoices]\n  ) {\n    listProjects (\n      organization: $organization\n      state_In: $state_In\n    ) {\n      edges {\n        node {\n          id\n          state\n          name\n          description\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateProject (\n    $publish: Boolean\n    $organization: ID!\n    $name: String!\n    $description: String\n  ) {\n    createProject (\n      input: {\n        publish: $publish\n        organization: $organization\n        name: $name\n        description: $description\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProject (\n    $publish: Boolean\n    $organization: ID!\n    $name: String!\n    $description: String\n  ) {\n    createProject (\n      input: {\n        publish: $publish\n        organization: $organization\n        name: $name\n        description: $description\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateProject (\n    $id: ID!\n    $name: String\n    $description: String\n  ) {\n    updateProject (\n      input: {\n        id: $id\n        name: $name\n        description: $description\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProject (\n    $id: ID!\n    $name: String\n    $description: String\n  ) {\n    updateProject (\n      input: {\n        id: $id\n        name: $name\n        description: $description\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation PublishProject (\n    $id: ID!\n  ) {\n    publishProject (\n      input: {\n        id: $id\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PublishProject (\n    $id: ID!\n  ) {\n    publishProject (\n      input: {\n        id: $id\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ArchiveProject (\n    $id: ID!\n  ) {\n    archiveProject (\n      input: {\n        id: $id\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ArchiveProject (\n    $id: ID!\n  ) {\n    archiveProject (\n      input: {\n        id: $id\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteProject (\n    $id: ID!\n  ) {\n    deleteProject (\n      input: {\n        id: $id\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteProject (\n    $id: ID!\n  ) {\n    deleteProject (\n      input: {\n        id: $id\n      }\n    ) {\n      project {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ListTasks (\n    $operation: ID\n    $project: ID\n    $organization: ID\n    $state_In: [GeorgaTaskStateChoices]\n  ) {\n    listTasks (\n      operation: $operation\n      operation_Project: $project\n      operation_Project_Organization: $organization\n      state_In: $state_In\n    ) {\n      edges {\n        node {\n          id\n          state\n          name\n          description\n          field {\n            name\n            description\n          }\n          startTime\n          endTime\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ListTasks (\n    $operation: ID\n    $project: ID\n    $organization: ID\n    $state_In: [GeorgaTaskStateChoices]\n  ) {\n    listTasks (\n      operation: $operation\n      operation_Project: $project\n      operation_Project_Organization: $organization\n      state_In: $state_In\n    ) {\n      edges {\n        node {\n          id\n          state\n          name\n          description\n          field {\n            name\n            description\n          }\n          startTime\n          endTime\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation PublishTask (\n    $id: ID!\n  ) {\n    publishTask (\n      input: {\n        id: $id\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PublishTask (\n    $id: ID!\n  ) {\n    publishTask (\n      input: {\n        id: $id\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ArchiveTask (\n    $id: ID!\n  ) {\n    archiveTask (\n      input: {\n        id: $id\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ArchiveTask (\n    $id: ID!\n  ) {\n    archiveTask (\n      input: {\n        id: $id\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteTask (\n    $id: ID!\n  ) {\n    deleteTask (\n      input: {\n        id: $id\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteTask (\n    $id: ID!\n  ) {\n    deleteTask (\n      input: {\n        id: $id\n      }\n    ) {\n      task {\n        id\n      }\n      errors {\n        field\n        messages\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;